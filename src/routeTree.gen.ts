/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SessionSessionIdRouteImport } from './routes/session.$sessionId'
import { Route as SessionSessionIdSettingsRouteImport } from './routes/session_.$sessionId.settings'
import { Route as SessionSessionIdAttributesRouteImport } from './routes/session_.$sessionId.attributes'
import { Route as SessionSessionIdDistributionsDistributionIdRouteImport } from './routes/session_.$sessionId_.distributions_.$distributionId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SessionSessionIdRoute = SessionSessionIdRouteImport.update({
  id: '/session/$sessionId',
  path: '/session/$sessionId',
  getParentRoute: () => rootRouteImport,
} as any)
const SessionSessionIdSettingsRoute =
  SessionSessionIdSettingsRouteImport.update({
    id: '/session_/$sessionId/settings',
    path: '/session/$sessionId/settings',
    getParentRoute: () => rootRouteImport,
  } as any)
const SessionSessionIdAttributesRoute =
  SessionSessionIdAttributesRouteImport.update({
    id: '/session_/$sessionId/attributes',
    path: '/session/$sessionId/attributes',
    getParentRoute: () => rootRouteImport,
  } as any)
const SessionSessionIdDistributionsDistributionIdRoute =
  SessionSessionIdDistributionsDistributionIdRouteImport.update({
    id: '/session_/$sessionId_/distributions_/$distributionId',
    path: '/session/$sessionId/distributions/$distributionId',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/session/$sessionId': typeof SessionSessionIdRoute
  '/session/$sessionId/attributes': typeof SessionSessionIdAttributesRoute
  '/session/$sessionId/settings': typeof SessionSessionIdSettingsRoute
  '/session/$sessionId/distributions/$distributionId': typeof SessionSessionIdDistributionsDistributionIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/session/$sessionId': typeof SessionSessionIdRoute
  '/session/$sessionId/attributes': typeof SessionSessionIdAttributesRoute
  '/session/$sessionId/settings': typeof SessionSessionIdSettingsRoute
  '/session/$sessionId/distributions/$distributionId': typeof SessionSessionIdDistributionsDistributionIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/session/$sessionId': typeof SessionSessionIdRoute
  '/session_/$sessionId/attributes': typeof SessionSessionIdAttributesRoute
  '/session_/$sessionId/settings': typeof SessionSessionIdSettingsRoute
  '/session_/$sessionId_/distributions_/$distributionId': typeof SessionSessionIdDistributionsDistributionIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/session/$sessionId'
    | '/session/$sessionId/attributes'
    | '/session/$sessionId/settings'
    | '/session/$sessionId/distributions/$distributionId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/session/$sessionId'
    | '/session/$sessionId/attributes'
    | '/session/$sessionId/settings'
    | '/session/$sessionId/distributions/$distributionId'
  id:
    | '__root__'
    | '/'
    | '/session/$sessionId'
    | '/session_/$sessionId/attributes'
    | '/session_/$sessionId/settings'
    | '/session_/$sessionId_/distributions_/$distributionId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SessionSessionIdRoute: typeof SessionSessionIdRoute
  SessionSessionIdAttributesRoute: typeof SessionSessionIdAttributesRoute
  SessionSessionIdSettingsRoute: typeof SessionSessionIdSettingsRoute
  SessionSessionIdDistributionsDistributionIdRoute: typeof SessionSessionIdDistributionsDistributionIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/session/$sessionId': {
      id: '/session/$sessionId'
      path: '/session/$sessionId'
      fullPath: '/session/$sessionId'
      preLoaderRoute: typeof SessionSessionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/session_/$sessionId/settings': {
      id: '/session_/$sessionId/settings'
      path: '/session/$sessionId/settings'
      fullPath: '/session/$sessionId/settings'
      preLoaderRoute: typeof SessionSessionIdSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/session_/$sessionId/attributes': {
      id: '/session_/$sessionId/attributes'
      path: '/session/$sessionId/attributes'
      fullPath: '/session/$sessionId/attributes'
      preLoaderRoute: typeof SessionSessionIdAttributesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/session_/$sessionId_/distributions_/$distributionId': {
      id: '/session_/$sessionId_/distributions_/$distributionId'
      path: '/session/$sessionId/distributions/$distributionId'
      fullPath: '/session/$sessionId/distributions/$distributionId'
      preLoaderRoute: typeof SessionSessionIdDistributionsDistributionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SessionSessionIdRoute: SessionSessionIdRoute,
  SessionSessionIdAttributesRoute: SessionSessionIdAttributesRoute,
  SessionSessionIdSettingsRoute: SessionSessionIdSettingsRoute,
  SessionSessionIdDistributionsDistributionIdRoute:
    SessionSessionIdDistributionsDistributionIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
